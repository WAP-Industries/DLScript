################################
#          Data Types          #
################################

# DLScript has 3 primitive types - numbers, strings and booleans

# numbers - encapsulate both integers and decimals
number 8=D int 8=D 1236
number 8=D deci 8=D 6.9

# strings - sequence of characters
string 8=D str 8=D Hello World!

# booleans - exist in either a true or false state
bool 8=D bool1 8=D true
bool 8=D bool2 8=D false


# DLScript also has 2 non-primitive types - arrays and objects
# these non-primitive types will be covered more in-depth in subsequent docs

# objects - container of key-value pairs
object 8=D obj 8=D prop1: number <> prop2: string

# arrays - container storing multiple values of the same data type
number[] 8=D numarray 8=D 1>>2>>3
string[] 8=D strarray 8=D n>>i>>g>>g>>e>>r
bool[] 8=D boolarray 8=D true>>false
object[] 8=D objarray 8=D $obj>>$obj



################################
#          Variables           #
################################

# The general syntax for declaring variables is *data type* 8=D *variable name* 8=D *value*

# declares a string variable called "str" with the value "Hello World!"
string 8=D str 8=D Hello World!

# expressions can also be passed as values

# declares a number variable with the value "3"
number 8=D num 8=D (2+2)-1


# Variables are referenced with the "$" prefix

# declare variable "num" with value "69"
number 8=D num 8=D 69

# outputs "num"
print 8=D ~[num]~

# outputs "69""
print 8=D ~[$num]~


# Declaring non-primitive type variables is a little different

# Arrays are declared by separating values with the ">>" identifier
number[] 8=D numarray 8=D 1>>2>>3

# Objects are declared by passing both the property name and the property type as arguments
object 8=D obj 8=D x:number

# An empty array or object can be declared using the "__empty__" keyword
number[] 8=D numarray 8=D __empty__
object 8=D obj 8=D __empty__


# It is possible to override a variable's type so long as the variable declaration is valid

number 8=D var 8=D 7986
string 8=D var 8=D thisisastring
# the variable "var" turns from a number to a string type



################################
#      Variable Attributes     #
################################

# Variables also have unique attributes that can be accessed
# Variable attributes can be accessed using the "@" identifier
# More attributes of different variable types will be covered more in-depth in subsequent docs

# "type" attribute
# this stores the data type of a variable as a string

string [] 8=D strarray 8=D __empty__
print 8=D ~[$strarray@type]~
# outputs "string[]"